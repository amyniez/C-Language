//1.写一个函数可以判断一个数是不是素数
//2.写一个函数判断一年是不是闰年
//3.写一个函数实现一个整型有序数组的二分查找
//4.写一个函数，每次调用一次这个函数，就会将num的值增加1


//1.写一个函数可以判断一个数是不是素数
int is_prime(int n)
{
	int j = 0;
	for (j = 2; j < n; j++)// 2 -> n-1
	{
		if (n%j == 0)
		{
			return 0;
		}
	}
	return 1;
}

int main()
{
	int i = 0;
	for (i = 100; i <= 200; i++)
	{
		if (is_prime(i) == 1)
			printf("%d\n", i);
	}
	return 0;
}


//3.写一个函数实现一个整型有序数组的二分查找
//                    本质上arr是一个指针
int binary_search(int arr[], int k, int sz)
{
	int left = 0;
	int right = sz - 1;


	while (left <= right)
	{
		int mid = (left + right) / 2;
		if (arr[mid] < k)
		{
			left = mid + 1;
		}
		else if (arr[mid] > k)
		{
			right = mid - 1;
		}
		else
		{
			return mid;
		}
	}
	return -1;
}

int main()
{
	int arr[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	int k = 5;
	int sz = sizeof(arr) / sizeof(arr[0]);//注意这句code的位置，不能放在自定义函数中，因为传递过去的是数组arr首元素的地址

	//                      实际上传递过去的是数组arr首元素的地址
	int ret = binary_search(arr, k, sz);
	//如果找到返回这个数的下标，如果找不到，则返回-1
	if (ret == -1)
	{
		printf("找不到指定的数字\n");
	}
	else
	{
		printf("找到了，下标为：%d\n", ret);
	}
	return 0;
}


//4.写一个函数，每次调用一次这个函数，就会将num的值增加1
void Add(int* p)
{
	(*p)++;//注意++的优先级高于*
}

int main()
{
	int num = 0;
	Add(&num);
	printf("num=%d\n", num);//1
	Add(&num);
	printf("num=%d\n", num);//2
	Add(&num);
	printf("num=%d\n", num);//3

	return 0;
}

